{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  OPEN_MODAL: \"OPEN_MODAL\",\n  CLOSE_MODAL: \"CLOSE_MODAL\",\n  DELETE_LIST_ACTION: \"DELETE_LIST_ACTION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\"\n};\nconst ModalType = {\n  DELETE_LIST: \"DELETE_LIST\",\n  DELETE_SONG: \"DELETE_SONG\",\n  NONE: \"NONE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeleteList: null,\n    markDeleteSong: null,\n    modalType: ModalType.NONE\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // PREPARE TO DELETE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: payload,\n            modalType: ModalType.DELETE_SONG\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      case GlobalStoreActionType.DELETE_LIST_ACTION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      case GlobalStoreActionType.OPEN_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: payload,\n            markDeleteSong: null,\n            modalType: ModalType.DELETE_LIST\n          });\n        }\n      case GlobalStoreActionType.CLOSE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    console.log(id);\n    // GET THE LIST\n    async function asyncChangeListName(id, newName) {\n      let response = await api.getPlaylistById(id._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        console.log(pl);\n        pl.name = newName;\n        async function updateList(pl) {\n          let up = {\n            _id: pl._id,\n            pl: pl\n          };\n          response = await api.updatePlaylistById(up);\n          if (response.data.success) {\n            async function getListPairs(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getListPairs(pl);\n          }\n        }\n        updateList(pl);\n      }\n    }\n    asyncChangeListName(id, newName);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addSong = function (i, s) {\n    async function asyncAddSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.songs.splice(i, 0, s);\n        async function updateTheList(pl) {\n          let ud = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(ud);\n          if (response.data.success) {\n            async function getPairs(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getPairs(pl);\n          }\n        }\n        updateTheList(pl);\n      }\n    }\n    asyncAddSong();\n  };\n  store.getMarkedListName = () => {\n    if (store.markDeleteList) {\n      return store.markDeleteList.name;\n    }\n  };\n  store.getMarkedSong = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song;\n    }\n  };\n  store.getMarkedSongArtist = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.artist;\n    }\n  };\n  store.getMarkedSongName = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.title;\n    }\n  };\n  store.getMarkedSongYoutubeid = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.youTubeId;\n    }\n  };\n  store.getMarkedSongIndex = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.index;\n    }\n  };\n  store.markSongForDeletion = function (nameAndIndex) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: nameAndIndex\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.OPEN_MODAL,\n      payload: id\n    });\n  };\n  store.deletePlaylist = function () {\n    async function asyncDeletePlaylist() {\n      const resp = await api.deletePlaylistById(store.markDeleteList._id);\n      if (resp.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST_ACTION,\n          payload: null\n        });\n        store.closeModal(\"delete-list-modal\");\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDeletePlaylist();\n  };\n  //to check whether the modal type is delete list\n  store.deleteListModalIsOpen = () => {\n    return store.modalType === ModalType.DELETE_LIST;\n  };\n  store.deleteSong = function (i) {\n    async function asyncChangeListName() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.songs.splice(i, 1);\n        async function updateList(pl) {\n          let update = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(update);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsA = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsA,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(pl);\n          }\n        }\n        updateList(pl);\n      }\n    }\n    asyncChangeListName();\n    store.closeModal(\"delete-song-modal\");\n  };\n  store.deleteSongModalIsOpen = () => {\n    return store.modalType === ModalType.DELETE_SONG;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.closeModal = function (modal) {\n    document.getElementById(modal).classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n  store.createNewList = function () {\n    console.log(\"inside\");\n    async function asyncCreateNewList() {\n      let id = \"Untitled\" + (store.newListCounter + 1);\n      const response = await api.createNewList({\n        name: id,\n        songs: []\n      });\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.newListCounter += 1;\n        store.loadIdNamePairs();\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.addDeleteSongTransaction = function (index, oldSong) {\n    let transaction = new DeleteSong_Transaction(store, index, oldSong);\n    tps.addTransaction(transaction);\n  };\n  store.addAddSongTransaction = function (i, s) {\n    let t = new AddSong_Transaction(store, i, s);\n    tps.addTransaction(t);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"X6Fzw1g+Jh+PTIU96R1U6FG4Ieo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","DeleteSong_Transaction","AddSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","OPEN_MODAL","CLOSE_MODAL","DELETE_LIST_ACTION","MARK_SONG_FOR_DELETION","ModalType","DELETE_LIST","DELETE_SONG","NONE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeleteList","markDeleteSong","modalType","storeReducer","action","type","payload","playlist","changeListName","id","newName","console","log","asyncChangeListName","response","getPlaylistById","_id","data","success","pl","name","updateList","up","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","addSong","i","s","asyncAddSong","splice","updateTheList","ud","getPairs","getMarkedListName","getMarkedSong","song","getMarkedSongArtist","artist","getMarkedSongName","title","getMarkedSongYoutubeid","youTubeId","getMarkedSongIndex","index","markSongForDeletion","nameAndIndex","markListForDeletion","deletePlaylist","asyncDeletePlaylist","resp","deletePlaylistById","closeModal","deleteListModalIsOpen","deleteSong","update","pairsA","deleteSongModalIsOpen","setlistNameActive","modal","document","getElementById","classList","remove","createNewList","asyncCreateNewList","addDeleteSongTransaction","oldSong","transaction","addTransaction","addAddSongTransaction","t"],"sources":["/Users/ronghaozeng/playlister_HW-/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    OPEN_MODAL:\"OPEN_MODAL\",\n    CLOSE_MODAL:\"CLOSE_MODAL\",\n    DELETE_LIST_ACTION:\"DELETE_LIST_ACTION\",\n    MARK_SONG_FOR_DELETION:\"MARK_SONG_FOR_DELETION\"\n}\nconst ModalType = {\n    DELETE_LIST: \"DELETE_LIST\",\n    DELETE_SONG:\"DELETE_SONG\",\n    NONE:\"NONE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeleteList :null,\n        markDeleteSong:null,\n        modalType: ModalType.NONE\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // PREPARE TO DELETE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:payload,\n                    modalType: ModalType.DELETE_SONG\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            case GlobalStoreActionType.DELETE_LIST_ACTION:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter:store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE\n                })\n            }\n            case GlobalStoreActionType.OPEN_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : store.currentList,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:payload,\n                    markDeleteSong:null,\n                    modalType:ModalType.DELETE_LIST\n                })\n\n            }\n            case GlobalStoreActionType.CLOSE_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : store.currentList,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        console.log(id)\n        // GET THE LIST\n        async function asyncChangeListName(id,newName) {\n            let response = await api.getPlaylistById(id._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                console.log(pl)\n                pl.name = newName;\n                async function updateList(pl) {\n                    let up = {\n                        _id:pl._id,\n                        pl:pl\n                    }\n                    response = await api.updatePlaylistById(up);\n                    if (response.data.success) {\n                        async function getListPairs(pl) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: pl\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(pl);\n                    }\n                }\n                updateList(pl);\n            }\n        }\n        asyncChangeListName(id,newName);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.addSong = function(i,s){\n        async function asyncAddSong() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                pl.songs.splice(i, 0, s);\n                async function updateTheList(pl) {\n                    let ud = \n                    {   _id: pl._id,\n                        playlist: pl\n                    }\n                    response = await api.updatePlaylistById(ud);\n                    if (response.data.success) {\n                        async function getPairs(pl) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: pl\n                                    }\n                                });\n                            }\n                        }\n                        getPairs(pl);\n                    }\n                }\n                updateTheList(pl);\n            }\n        }\n        asyncAddSong();\n    }\n    store.getMarkedListName =() =>{\n        if(store.markDeleteList){\n            return store.markDeleteList.name;\n        }\n    }\n    store.getMarkedSong = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song;\n        }\n    }\n    store.getMarkedSongArtist = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.artist;\n        }\n    }\n    store.getMarkedSongName = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.title;\n        }\n    }\n    store.getMarkedSongYoutubeid = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.youTubeId;\n        }\n    }\n    store.getMarkedSongIndex = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.index;\n        }\n    }\n    store.markSongForDeletion = function(nameAndIndex){\n        storeReducer({\n            type:GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload:nameAndIndex\n        });\n    }\n\n    store.markListForDeletion = function(id){\n        storeReducer({\n            type: GlobalStoreActionType.OPEN_MODAL,\n            payload:id\n        })\n    }\n    store.deletePlaylist = function(){\n        async function asyncDeletePlaylist(){\n            const resp = await api.deletePlaylistById(store.markDeleteList._id);\n            if(resp.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.DELETE_LIST_ACTION,\n                    payload:null\n                });\n                store.closeModal(\"delete-list-modal\");\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeletePlaylist();\n    }\n    //to check whether the modal type is delete list\n    store.deleteListModalIsOpen = () =>{\n        return store.modalType === ModalType.DELETE_LIST;\n    }\n\n    store.deleteSong = function (i){\n        async function asyncChangeListName() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                pl.songs.splice(i, 1);\n                async function updateList(pl) {\n                    let update = \n                    {   _id: pl._id,\n                        playlist: pl\n                    }\n                    response = await api.updatePlaylistById(update);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsA = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsA,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(pl);\n                    }\n                }\n                updateList(pl);\n                \n            }\n        }\n        asyncChangeListName();\n        store.closeModal(\"delete-song-modal\")\n    }\n    store.deleteSongModalIsOpen = () =>{\n        return store.modalType === ModalType.DELETE_SONG;\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    \n    store.closeModal = function (modal){\n        document.getElementById(modal).classList.remove(\"is-visible\");\n        storeReducer({\n            type:GlobalStoreActionType.CLOSE_MODAL,\n            payload:null\n        })\n    }\n    \n    store.createNewList = function(){\n        console.log(\"inside\");\n        async function asyncCreateNewList(){\n            let id = \"Untitled\" +(store.newListCounter+1);\n            const response = await api.createNewList({name:id , songs:[]});\n            if (response.data.success){\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type:GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload:playlist\n                });\n                store.newListCounter+=1;\n                store.loadIdNamePairs();\n            }\n        } \n        asyncCreateNewList();\n    }\n    store.addDeleteSongTransaction= function(index,oldSong){\n        let transaction = new DeleteSong_Transaction(store,index,oldSong);\n        tps.addTransaction(transaction);\n    }\n    store.addAddSongTransaction = function(i,s){\n        let t = new AddSong_Transaction(store,i,s);\n        tps.addTransaction(t);\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":";AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAOC,mBAAmB,MAAM,qCAAqC;AACrE,OAAO,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,CAAC,CAAC,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBAAkB;EACpCC,kBAAkB,EAAE,oBAAoB;EACxCC,eAAe,EAAE,iBAAiB;EAClCC,kBAAkB,EAAE,oBAAoB;EACxCC,gBAAgB,EAAE,kBAAkB;EACpCC,yBAAyB,EAAE,2BAA2B;EACtDC,UAAU,EAAC,YAAY;EACvBC,WAAW,EAAC,aAAa;EACzBC,kBAAkB,EAAC,oBAAoB;EACvCC,sBAAsB,EAAC;AAC3B,CAAC;AACD,MAAMC,SAAS,GAAG;EACdC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAC,aAAa;EACzBC,IAAI,EAAC;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAG,IAAIpB,KAAK,EAAE;;AAEvB;AACA;AACA,OAAO,MAAMqB,cAAc,GAAG,MAAM;EAAA;EAChC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC;IAC/ByB,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,IAAI;IACjBC,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE,IAAI;IACpBC,cAAc,EAAC,IAAI;IACnBC,SAAS,EAAEd,SAAS,CAACG;EACzB,CAAC,CAAC;;EAEF;EACA;EACA,MAAMY,YAAY,GAAIC,MAAM,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,MAAM;IAChC,QAAQC,IAAI;MACR;MACA,KAAK5B,qBAAqB,CAACC,gBAAgB;QAAE;UACzC,OAAOiB,QAAQ,CAAC;YACZC,WAAW,EAAEU,OAAO,CAACV,WAAW;YAChCC,WAAW,EAAES,OAAO,CAACC,QAAQ;YAC7BT,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKd,qBAAqB,CAACE,kBAAkB;QAAE;UAC3C,OAAOgB,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKd,qBAAqB,CAACG,eAAe;QAAE;UACxC,OAAOe,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAES,OAAO;YACpBR,cAAc,EAAEJ,KAAK,CAACI,cAAc,GAAG,CAAC;YACxCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKd,qBAAqB,CAACI,kBAAkB;QAAE;UAC3C,OAAOc,QAAQ,CAAC;YACZC,WAAW,EAAEU,OAAO;YACpBT,WAAW,EAAEH,KAAK,CAACG,WAAW;YAC9BC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKd,qBAAqB,CAACU,sBAAsB;QAAE;UAC/C,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEH,KAAK,CAACG,WAAW;YAC9BC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAACK,OAAO;YACtBJ,SAAS,EAAEd,SAAS,CAACE;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKb,qBAAqB,CAACK,gBAAgB;QAAE;UACzC,OAAOa,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAES,OAAO;YACpBR,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA;MACA,KAAKd,qBAAqB,CAACM,yBAAyB;QAAE;UAClD,OAAOY,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAES,OAAO;YACpBR,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAAEd,SAAS,CAACG;UACzB,CAAC,CAAC;QACN;MACA,KAAKd,qBAAqB,CAACS,kBAAkB;QAAC;UAC1C,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEH,KAAK,CAACG,WAAW;YAC9BC,cAAc,EAACJ,KAAK,CAACI,cAAc;YACnCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAC,IAAI;YACnBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAACd,SAAS,CAACG;UACxB,CAAC,CAAC;QACN;MACA,KAAKd,qBAAqB,CAACO,UAAU;QAAC;UAClC,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAGF,KAAK,CAACE,WAAW;YAC/BC,WAAW,EAAGH,KAAK,CAACG,WAAW;YAC/BC,cAAc,EAAGJ,KAAK,CAACI,cAAc;YACrCC,cAAc,EAAC,KAAK;YACpBC,cAAc,EAACM,OAAO;YACtBL,cAAc,EAAC,IAAI;YACnBC,SAAS,EAACd,SAAS,CAACC;UACxB,CAAC,CAAC;QAEN;MACA,KAAKZ,qBAAqB,CAACQ,WAAW;QAAC;UACnC,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAGF,KAAK,CAACE,WAAW;YAC/BC,WAAW,EAAGH,KAAK,CAACG,WAAW;YAC/BC,cAAc,EAAGJ,KAAK,CAACI,cAAc;YACrCC,cAAc,EAAC,KAAK;YACpBC,cAAc,EAAC,IAAI;YACnBC,cAAc,EAAC,IAAI;YACnBC,SAAS,EAACd,SAAS,CAACG;UACxB,CAAC,CAAC;QACN;MACA;QACI,OAAOG,KAAK;IAAC;EAEzB,CAAC;EACD;EACA;EACA;;EAEA;EACAA,KAAK,CAACc,cAAc,GAAG,UAAUC,EAAE,EAAEC,OAAO,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAACH,EAAE,CAAC;IACf;IACA,eAAeI,mBAAmB,CAACJ,EAAE,EAACC,OAAO,EAAE;MAC3C,IAAII,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACN,EAAE,CAACO,GAAG,CAAC;MAChD,IAAIF,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIC,EAAE,GAAGL,QAAQ,CAACG,IAAI,CAACV,QAAQ;QAC/BI,OAAO,CAACC,GAAG,CAACO,EAAE,CAAC;QACfA,EAAE,CAACC,IAAI,GAAGV,OAAO;QACjB,eAAeW,UAAU,CAACF,EAAE,EAAE;UAC1B,IAAIG,EAAE,GAAG;YACLN,GAAG,EAACG,EAAE,CAACH,GAAG;YACVG,EAAE,EAACA;UACP,CAAC;UACDL,QAAQ,GAAG,MAAMzC,GAAG,CAACkD,kBAAkB,CAACD,EAAE,CAAC;UAC3C,IAAIR,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;YACvB,eAAeM,YAAY,CAACL,EAAE,EAAE;cAC5BL,QAAQ,GAAG,MAAMzC,GAAG,CAACoD,gBAAgB,EAAE;cACvC,IAAIX,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;gBACvB,IAAIQ,UAAU,GAAGZ,QAAQ,CAACG,IAAI,CAACrB,WAAW;gBAC1CO,YAAY,CAAC;kBACTE,IAAI,EAAE5B,qBAAqB,CAACC,gBAAgB;kBAC5C4B,OAAO,EAAE;oBACLV,WAAW,EAAE8B,UAAU;oBACvBnB,QAAQ,EAAEY;kBACd;gBACJ,CAAC,CAAC;cACN;YACJ;YACAK,YAAY,CAACL,EAAE,CAAC;UACpB;QACJ;QACAE,UAAU,CAACF,EAAE,CAAC;MAClB;IACJ;IACAN,mBAAmB,CAACJ,EAAE,EAACC,OAAO,CAAC;EACnC,CAAC;;EAED;EACAhB,KAAK,CAACiC,gBAAgB,GAAG,YAAY;IACjCxB,YAAY,CAAC;MACTE,IAAI,EAAE5B,qBAAqB,CAACE,kBAAkB;MAC9C2B,OAAO,EAAE,CAAC;IACd,CAAC,CAAC;EACN,CAAC;;EAED;EACAZ,KAAK,CAACkC,eAAe,GAAG,YAAY;IAChC,eAAeC,oBAAoB,GAAG;MAClC,MAAMf,QAAQ,GAAG,MAAMzC,GAAG,CAACoD,gBAAgB,EAAE;MAC7C,IAAIX,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIQ,UAAU,GAAGZ,QAAQ,CAACG,IAAI,CAACrB,WAAW;QAC1CO,YAAY,CAAC;UACTE,IAAI,EAAE5B,qBAAqB,CAACI,kBAAkB;UAC9CyB,OAAO,EAAEoB;QACb,CAAC,CAAC;MACN,CAAC,MACI;QACDf,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACnD;IACJ;IACAiB,oBAAoB,EAAE;EAC1B,CAAC;EAEDnC,KAAK,CAACoC,cAAc,GAAG,UAAUrB,EAAE,EAAE;IACjC,eAAesB,mBAAmB,CAACtB,EAAE,EAAE;MACnC,IAAIK,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACN,EAAE,CAAC;MAC5C,IAAIK,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIX,QAAQ,GAAGO,QAAQ,CAACG,IAAI,CAACV,QAAQ;QAErC,IAAIO,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;UACvBf,YAAY,CAAC;YACTE,IAAI,EAAE5B,qBAAqB,CAACK,gBAAgB;YAC5CwB,OAAO,EAAEC;UACb,CAAC,CAAC;UACFb,KAAK,CAACsC,OAAO,CAACC,IAAI,CAAC,YAAY,GAAG1B,QAAQ,CAACS,GAAG,CAAC;QACnD;MACJ;IACJ;IACAe,mBAAmB,CAACtB,EAAE,CAAC;EAC3B,CAAC;EACDf,KAAK,CAACwC,eAAe,GAAG,YAAW;IAC/B,OAAOxC,KAAK,CAACG,WAAW,CAACsC,KAAK,CAACC,MAAM;EACzC,CAAC;EACD1C,KAAK,CAAC2C,IAAI,GAAG,YAAY;IACrB7C,GAAG,CAAC8C,eAAe,EAAE;EACzB,CAAC;EACD5C,KAAK,CAAC6C,IAAI,GAAG,YAAY;IACrB/C,GAAG,CAACgD,aAAa,EAAE;EACvB,CAAC;EACD9C,KAAK,CAAC+C,OAAO,GAAG,UAASC,CAAC,EAACC,CAAC,EAAC;IACzB,eAAeC,YAAY,GAAG;MAC1B,IAAI9B,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACrB,KAAK,CAACG,WAAW,CAACmB,GAAG,CAAC;MAC/D,IAAIF,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIC,EAAE,GAAGL,QAAQ,CAACG,IAAI,CAACV,QAAQ;QAC/BY,EAAE,CAACgB,KAAK,CAACU,MAAM,CAACH,CAAC,EAAE,CAAC,EAAEC,CAAC,CAAC;QACxB,eAAeG,aAAa,CAAC3B,EAAE,EAAE;UAC7B,IAAI4B,EAAE,GACN;YAAI/B,GAAG,EAAEG,EAAE,CAACH,GAAG;YACXT,QAAQ,EAAEY;UACd,CAAC;UACDL,QAAQ,GAAG,MAAMzC,GAAG,CAACkD,kBAAkB,CAACwB,EAAE,CAAC;UAC3C,IAAIjC,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;YACvB,eAAe8B,QAAQ,CAAC7B,EAAE,EAAE;cACxBL,QAAQ,GAAG,MAAMzC,GAAG,CAACoD,gBAAgB,EAAE;cACvC,IAAIX,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;gBACvB,IAAIQ,UAAU,GAAGZ,QAAQ,CAACG,IAAI,CAACrB,WAAW;gBAC1CO,YAAY,CAAC;kBACTE,IAAI,EAAE5B,qBAAqB,CAACC,gBAAgB;kBAC5C4B,OAAO,EAAE;oBACLV,WAAW,EAAE8B,UAAU;oBACvBnB,QAAQ,EAAEY;kBACd;gBACJ,CAAC,CAAC;cACN;YACJ;YACA6B,QAAQ,CAAC7B,EAAE,CAAC;UAChB;QACJ;QACA2B,aAAa,CAAC3B,EAAE,CAAC;MACrB;IACJ;IACAyB,YAAY,EAAE;EAClB,CAAC;EACDlD,KAAK,CAACuD,iBAAiB,GAAE,MAAK;IAC1B,IAAGvD,KAAK,CAACM,cAAc,EAAC;MACpB,OAAON,KAAK,CAACM,cAAc,CAACoB,IAAI;IACpC;EACJ,CAAC;EACD1B,KAAK,CAACwD,aAAa,GAAG,MAAK;IACvB,IAAGxD,KAAK,CAACO,cAAc,EAAC;MACpB,OAAOP,KAAK,CAACO,cAAc,CAACkD,IAAI;IACpC;EACJ,CAAC;EACDzD,KAAK,CAAC0D,mBAAmB,GAAG,MAAK;IAC7B,IAAG1D,KAAK,CAACO,cAAc,EAAC;MACpB,OAAOP,KAAK,CAACO,cAAc,CAACkD,IAAI,CAACE,MAAM;IAC3C;EACJ,CAAC;EACD3D,KAAK,CAAC4D,iBAAiB,GAAG,MAAK;IAC3B,IAAG5D,KAAK,CAACO,cAAc,EAAC;MACpB,OAAOP,KAAK,CAACO,cAAc,CAACkD,IAAI,CAACI,KAAK;IAC1C;EACJ,CAAC;EACD7D,KAAK,CAAC8D,sBAAsB,GAAG,MAAK;IAChC,IAAG9D,KAAK,CAACO,cAAc,EAAC;MACpB,OAAOP,KAAK,CAACO,cAAc,CAACkD,IAAI,CAACM,SAAS;IAC9C;EACJ,CAAC;EACD/D,KAAK,CAACgE,kBAAkB,GAAG,MAAK;IAC5B,IAAGhE,KAAK,CAACO,cAAc,EAAC;MACpB,OAAOP,KAAK,CAACO,cAAc,CAAC0D,KAAK;IACrC;EACJ,CAAC;EACDjE,KAAK,CAACkE,mBAAmB,GAAG,UAASC,YAAY,EAAC;IAC9C1D,YAAY,CAAC;MACTE,IAAI,EAAC5B,qBAAqB,CAACU,sBAAsB;MACjDmB,OAAO,EAACuD;IACZ,CAAC,CAAC;EACN,CAAC;EAEDnE,KAAK,CAACoE,mBAAmB,GAAG,UAASrD,EAAE,EAAC;IACpCN,YAAY,CAAC;MACTE,IAAI,EAAE5B,qBAAqB,CAACO,UAAU;MACtCsB,OAAO,EAACG;IACZ,CAAC,CAAC;EACN,CAAC;EACDf,KAAK,CAACqE,cAAc,GAAG,YAAU;IAC7B,eAAeC,mBAAmB,GAAE;MAChC,MAAMC,IAAI,GAAG,MAAM5F,GAAG,CAAC6F,kBAAkB,CAACxE,KAAK,CAACM,cAAc,CAACgB,GAAG,CAAC;MACnE,IAAGiD,IAAI,CAAChD,IAAI,CAACC,OAAO,EAAC;QACjBf,YAAY,CAAC;UACTE,IAAI,EAAC5B,qBAAqB,CAACS,kBAAkB;UAC7CoB,OAAO,EAAC;QACZ,CAAC,CAAC;QACFZ,KAAK,CAACyE,UAAU,CAAC,mBAAmB,CAAC;QACrCzE,KAAK,CAACkC,eAAe,EAAE;MAC3B;IACJ;IACAoC,mBAAmB,EAAE;EACzB,CAAC;EACD;EACAtE,KAAK,CAAC0E,qBAAqB,GAAG,MAAK;IAC/B,OAAO1E,KAAK,CAACQ,SAAS,KAAKd,SAAS,CAACC,WAAW;EACpD,CAAC;EAEDK,KAAK,CAAC2E,UAAU,GAAG,UAAU3B,CAAC,EAAC;IAC3B,eAAe7B,mBAAmB,GAAG;MACjC,IAAIC,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACrB,KAAK,CAACG,WAAW,CAACmB,GAAG,CAAC;MAC/D,IAAIF,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIC,EAAE,GAAGL,QAAQ,CAACG,IAAI,CAACV,QAAQ;QAC/BY,EAAE,CAACgB,KAAK,CAACU,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;QACrB,eAAerB,UAAU,CAACF,EAAE,EAAE;UAC1B,IAAImD,MAAM,GACV;YAAItD,GAAG,EAAEG,EAAE,CAACH,GAAG;YACXT,QAAQ,EAAEY;UACd,CAAC;UACDL,QAAQ,GAAG,MAAMzC,GAAG,CAACkD,kBAAkB,CAAC+C,MAAM,CAAC;UAC/C,IAAIxD,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;YACvB,eAAeM,YAAY,CAACjB,QAAQ,EAAE;cAClCO,QAAQ,GAAG,MAAMzC,GAAG,CAACoD,gBAAgB,EAAE;cACvC,IAAIX,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;gBACvB,IAAIqD,MAAM,GAAGzD,QAAQ,CAACG,IAAI,CAACrB,WAAW;gBACtCO,YAAY,CAAC;kBACTE,IAAI,EAAE5B,qBAAqB,CAACC,gBAAgB;kBAC5C4B,OAAO,EAAE;oBACLV,WAAW,EAAE2E,MAAM;oBACnBhE,QAAQ,EAAEA;kBACd;gBACJ,CAAC,CAAC;cACN;YACJ;YACAiB,YAAY,CAACL,EAAE,CAAC;UACpB;QACJ;QACAE,UAAU,CAACF,EAAE,CAAC;MAElB;IACJ;IACAN,mBAAmB,EAAE;IACrBnB,KAAK,CAACyE,UAAU,CAAC,mBAAmB,CAAC;EACzC,CAAC;EACDzE,KAAK,CAAC8E,qBAAqB,GAAG,MAAK;IAC/B,OAAO9E,KAAK,CAACQ,SAAS,KAAKd,SAAS,CAACE,WAAW;EACpD,CAAC;;EAED;EACAI,KAAK,CAAC+E,iBAAiB,GAAG,YAAY;IAClCtE,YAAY,CAAC;MACTE,IAAI,EAAE5B,qBAAqB,CAACM,yBAAyB;MACrDuB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC;EAEDZ,KAAK,CAACyE,UAAU,GAAG,UAAUO,KAAK,EAAC;IAC/BC,QAAQ,CAACC,cAAc,CAACF,KAAK,CAAC,CAACG,SAAS,CAACC,MAAM,CAAC,YAAY,CAAC;IAC7D3E,YAAY,CAAC;MACTE,IAAI,EAAC5B,qBAAqB,CAACQ,WAAW;MACtCqB,OAAO,EAAC;IACZ,CAAC,CAAC;EACN,CAAC;EAEDZ,KAAK,CAACqF,aAAa,GAAG,YAAU;IAC5BpE,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,eAAeoE,kBAAkB,GAAE;MAC/B,IAAIvE,EAAE,GAAG,UAAU,IAAGf,KAAK,CAACI,cAAc,GAAC,CAAC,CAAC;MAC7C,MAAMgB,QAAQ,GAAG,MAAMzC,GAAG,CAAC0G,aAAa,CAAC;QAAC3D,IAAI,EAACX,EAAE;QAAG0B,KAAK,EAAC;MAAE,CAAC,CAAC;MAC9D,IAAIrB,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAC;QACtB,IAAIX,QAAQ,GAAGO,QAAQ,CAACG,IAAI,CAACV,QAAQ;QACrCJ,YAAY,CAAC;UACTE,IAAI,EAAC5B,qBAAqB,CAACG,eAAe;UAC1C0B,OAAO,EAACC;QACZ,CAAC,CAAC;QACFb,KAAK,CAACI,cAAc,IAAE,CAAC;QACvBJ,KAAK,CAACkC,eAAe,EAAE;MAC3B;IACJ;IACAoD,kBAAkB,EAAE;EACxB,CAAC;EACDtF,KAAK,CAACuF,wBAAwB,GAAE,UAAStB,KAAK,EAACuB,OAAO,EAAC;IACnD,IAAIC,WAAW,GAAG,IAAI7G,sBAAsB,CAACoB,KAAK,EAACiE,KAAK,EAACuB,OAAO,CAAC;IACjE1F,GAAG,CAAC4F,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EACDzF,KAAK,CAAC2F,qBAAqB,GAAG,UAAS3C,CAAC,EAACC,CAAC,EAAC;IACvC,IAAI2C,CAAC,GAAG,IAAI/G,mBAAmB,CAACmB,KAAK,EAACgD,CAAC,EAACC,CAAC,CAAC;IAC1CnD,GAAG,CAAC4F,cAAc,CAACE,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,OAAO;IAAE5F,KAAK;IAAES;EAAa,CAAC;AAClC,CAAC;AAAA,GA9ZYV,cAAc"},"metadata":{},"sourceType":"module"}