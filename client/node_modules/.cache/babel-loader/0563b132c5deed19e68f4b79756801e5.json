{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  REFRESH_LIST: \"REFRESH_LIST\",\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  OPEN_MODAL: \"OPEN_MODAL\",\n  CLOSE_MODAL: \"CLOSE_MODAL\",\n  DELETE_LIST_ACTION: \"DELETE_LIST_ACTION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\"\n};\nconst ModalType = {\n  DELETE_LIST: \"DELETE_LIST\",\n  DELETE_SONG: \"DELETE_SONG\",\n  EDIT_SONG: \"EDIT_SONG\",\n  NONE: \"NONE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeleteList: null,\n    markDeleteSong: null,\n    modalType: ModalType.NONE,\n    hasModal: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: true\n          });\n        }\n      case GlobalStoreActionType.REFRESH_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      // PREPARE TO DELETE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: payload,\n            modalType: ModalType.DELETE_SONG,\n            hasModal: true\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      case GlobalStoreActionType.DELETE_LIST_ACTION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      case GlobalStoreActionType.OPEN_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: payload,\n            markDeleteSong: null,\n            modalType: ModalType.DELETE_LIST,\n            hasModal: true\n          });\n        }\n      case GlobalStoreActionType.CLOSE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE,\n            hasModal: false\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: payload,\n            modalType: ModalType.EDIT_SONG,\n            hasModal: true\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    async function asyncCLN(id) {\n      let response = await api.getPlaylistById(id._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.name = newName;\n        async function updateTheList(pl) {\n          let update = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(update);\n          if (response.data.success) {\n            async function getListNum(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getListNum(pl);\n          }\n        }\n        updateTheList(pl);\n      }\n    }\n    asyncCLN(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n  };\n  store.hasTransactionToRedo = function () {\n    return tps.hasTransactionToRedo();\n  };\n  store.hasTransactionToUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.editSong = function (i, initSong) {\n    async function asyncEditSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.songs.splice(i, 1, initSong);\n        async function updateTheList(pl) {\n          let up = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(up);\n          if (response.data.success) {\n            async function getPairs(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let array = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.REFRESH_LIST,\n                  payload: {\n                    idNamePairs: array,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getPairs(pl);\n          }\n        }\n        updateTheList(pl);\n      }\n    }\n    asyncEditSong();\n  };\n  store.addSong = function (i, s) {\n    async function asyncAddSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.songs.splice(i, 0, s);\n        async function updateTheList(pl) {\n          let ud = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(ud);\n          if (response.data.success) {\n            async function getPairs(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.REFRESH_LIST,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getPairs(pl);\n          }\n        }\n        updateTheList(pl);\n      }\n    }\n    asyncAddSong();\n  };\n  store.getMarkedListName = () => {\n    if (store.markDeleteList) {\n      return store.markDeleteList.name;\n    }\n  };\n  store.getMarkedSong = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song;\n    }\n  };\n  store.getMarkedSongArtist = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.artist;\n    }\n  };\n  store.getMarkedSongName = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.title;\n    }\n  };\n  store.getMarkedSongYoutubeid = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.song.youTubeId;\n    }\n  };\n  store.getMarkedSongIndex = () => {\n    if (store.markDeleteSong) {\n      return store.markDeleteSong.index;\n    }\n  };\n  store.markSongForEdition = function (nameAndIndex) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n      payload: nameAndIndex\n    });\n  };\n  store.markSongForDeletion = function (nameAndIndex) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: nameAndIndex\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.OPEN_MODAL,\n      payload: id\n    });\n  };\n  store.deletePlaylist = function () {\n    async function asyncDeletePlaylist() {\n      const resp = await api.deletePlaylistById(store.markDeleteList._id);\n      if (resp.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST_ACTION,\n          payload: null\n        });\n        store.closeModal(\"delete-list-modal\");\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDeletePlaylist();\n  };\n  //to check whether the modal type is delete list\n  store.deleteListModalIsOpen = () => {\n    return store.modalType === ModalType.DELETE_LIST;\n  };\n  store.deleteSong = function (i) {\n    async function asyncChangeListName() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        pl.songs.splice(i, 1);\n        async function updateList(pl) {\n          let update = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(update);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsA = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.REFRESH_LIST,\n                  payload: {\n                    idNamePairs: pairsA,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(pl);\n          }\n        }\n        updateList(pl);\n      }\n    }\n    asyncChangeListName();\n    store.closeModal(\"delete-song-modal\");\n  };\n  store.deleteSongModalIsOpen = () => {\n    return store.modalType === ModalType.DELETE_SONG;\n  };\n  store.editSongModalIsOpen = () => {\n    return store.modalType === ModalType.EDIT_SONG;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.closeModal = function (modal) {\n    document.getElementById(modal).classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n  store.moveSong = function (oldSongIndex, newSongIndex) {\n    async function asyncChangeListName() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let pl = response.data.playlist;\n        let movedSong = pl.songs[oldSongIndex];\n        pl.songs[oldSongIndex] = pl.songs[newSongIndex];\n        pl.songs[newSongIndex] = movedSong;\n        async function updateList(pl) {\n          let up = {\n            _id: pl._id,\n            playlist: pl\n          };\n          response = await api.updatePlaylistById(up);\n          if (response.data.success) {\n            async function getListPairs(pl) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsA = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.REFRESH_LIST,\n                  payload: {\n                    idNamePairs: pairsA,\n                    playlist: pl\n                  }\n                });\n              }\n            }\n            getListPairs(pl);\n          }\n        }\n        updateList(pl);\n      }\n    }\n    asyncChangeListName();\n  };\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let id = \"Untitled\" + (store.newListCounter + 1);\n      const response = await api.createNewList({\n        name: id,\n        songs: []\n      });\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.newListCounter += 1;\n        store.setCurrentList(playlist._id);\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.addDeleteSongTransaction = function (index, oldSong) {\n    let transaction = new DeleteSong_Transaction(store, index, oldSong);\n    tps.addTransaction(transaction);\n  };\n  store.addAddSongTransaction = function (i, s) {\n    let t = new AddSong_Transaction(store, i, s);\n    tps.addTransaction(t);\n  };\n  store.addEditSongTransaction = function (i, previousSong, initSong) {\n    let t = new EditSong_Transaction(store, i, previousSong, initSong);\n    tps.addTransaction(t);\n  };\n  store.addMoveSongTransaction = function (initOldSongIndex, initNewSongIndex) {\n    let t = new MoveSong_Transaction(store, initOldSongIndex, initNewSongIndex);\n    tps.addTransaction(t);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"GoiFAKK2/MrO0QOf6114uNMHCs0=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","DeleteSong_Transaction","AddSong_Transaction","EditSong_Transaction","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","REFRESH_LIST","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","OPEN_MODAL","CLOSE_MODAL","DELETE_LIST_ACTION","MARK_SONG_FOR_DELETION","MARK_SONG_FOR_EDITION","ModalType","DELETE_LIST","DELETE_SONG","EDIT_SONG","NONE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeleteList","markDeleteSong","modalType","hasModal","storeReducer","action","type","payload","playlist","changeListName","id","newName","asyncCLN","response","getPlaylistById","_id","data","success","pl","name","updateTheList","update","updatePlaylistById","getListNum","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","hasTransactionToRedo","hasTransactionToUndo","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","editSong","i","initSong","asyncEditSong","splice","up","getPairs","array","addSong","s","asyncAddSong","ud","getMarkedListName","getMarkedSong","song","getMarkedSongArtist","artist","getMarkedSongName","title","getMarkedSongYoutubeid","youTubeId","getMarkedSongIndex","index","markSongForEdition","nameAndIndex","markSongForDeletion","markListForDeletion","deletePlaylist","asyncDeletePlaylist","resp","deletePlaylistById","closeModal","deleteListModalIsOpen","deleteSong","asyncChangeListName","updateList","getListPairs","pairsA","deleteSongModalIsOpen","editSongModalIsOpen","setlistNameActive","modal","document","getElementById","classList","remove","moveSong","oldSongIndex","newSongIndex","movedSong","createNewList","asyncCreateNewList","addDeleteSongTransaction","oldSong","transaction","addTransaction","addAddSongTransaction","t","addEditSongTransaction","previousSong","addMoveSongTransaction","initOldSongIndex","initNewSongIndex"],"sources":["/Users/ronghaozeng/playlister_HW-/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    REFRESH_LIST:\"REFRESH_LIST\",\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    OPEN_MODAL:\"OPEN_MODAL\",\n    CLOSE_MODAL:\"CLOSE_MODAL\",\n    DELETE_LIST_ACTION:\"DELETE_LIST_ACTION\",\n    MARK_SONG_FOR_DELETION:\"MARK_SONG_FOR_DELETION\",\n    MARK_SONG_FOR_EDITION:\"MARK_SONG_FOR_EDITION\"\n}\nconst ModalType = {\n    DELETE_LIST: \"DELETE_LIST\",\n    DELETE_SONG:\"DELETE_SONG\",\n    EDIT_SONG:\"EDIT_SONG\",\n    NONE:\"NONE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeleteList :null,\n        markDeleteSong:null,\n        modalType: ModalType.NONE,\n        hasModal:false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:true\n                });\n            }\n            case GlobalStoreActionType.REFRESH_LIST:{\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false\n                });  \n            }\n\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false\n                });\n            }\n            // PREPARE TO DELETE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:payload,\n                    modalType: ModalType.DELETE_SONG,\n                    hasModal:true\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE,\n                    hasModal:false\n                });\n            }\n            case GlobalStoreActionType.DELETE_LIST_ACTION:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter:store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE,\n                    hasModal:false\n                })\n            }\n            case GlobalStoreActionType.OPEN_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : store.currentList,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:payload,\n                    markDeleteSong:null,\n                    modalType:ModalType.DELETE_LIST,\n                    hasModal:true\n                })\n\n            }\n            case GlobalStoreActionType.CLOSE_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : store.currentList,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE,\n                    hasModal:false\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDITION:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : store.currentList,\n                    newListCounter:store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:null,\n                    markDeleteSong:payload,\n                    modalType:ModalType.EDIT_SONG,\n                    hasModal:true\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        async function asyncCLN(id) {\n            let response = await api.getPlaylistById(id._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                pl.name = newName;\n                async function updateTheList(pl) {\n                    let update = {_id: pl._id,playlist: pl}\n                    response = await api.updatePlaylistById(update);\n                    if (response.data.success) {\n                        async function getListNum(pl) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {idNamePairs: pairsArray,playlist: pl}\n                                });\n                            }\n                        }\n                        getListNum(pl);\n                    }\n                }\n                updateTheList(pl);\n            }\n        }\n        asyncCLN(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n    }\n\n    store.hasTransactionToRedo=function(){\n        return tps.hasTransactionToRedo();\n    }\n    store.hasTransactionToUndo= function(){\n        return tps.hasTransactionToUndo();\n    }\n    \n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.editSong = function(i,initSong){\n        async function asyncEditSong(){\n            let response = await api.getPlaylistById(store.currentList._id);\n            if(response.data.success){\n                let pl = response.data.playlist;\n                pl.songs.splice(i,1,initSong);\n                async function updateTheList(pl){\n                    let up = {\n                        _id:pl._id,\n                        playlist:pl\n                    }\n                    response = await api.updatePlaylistById(up);\n                    if(response.data.success){\n                        async function getPairs(pl){\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success){\n                                let array = response.data.idNamePairs;\n                                storeReducer({\n                                    type:GlobalStoreActionType.REFRESH_LIST,\n                                    payload:{\n                                        idNamePairs:array,\n                                        playlist:pl\n                                    }\n                                })\n                            }\n                        }\n                        getPairs(pl);\n                    }\n                }\n                updateTheList(pl);\n            }\n        }\n        asyncEditSong();\n    }\n\n    store.addSong = function(i,s){\n        async function asyncAddSong() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                pl.songs.splice(i, 0, s);\n                async function updateTheList(pl) {\n                    let ud = \n                    {   _id: pl._id,\n                        playlist: pl\n                    }\n                    response = await api.updatePlaylistById(ud);\n                    if (response.data.success) {\n                        async function getPairs(pl) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.REFRESH_LIST,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: pl\n                                    }\n                                });\n                            }\n                        }\n                        getPairs(pl);\n                    }\n                }\n                updateTheList(pl);\n            }\n        }\n        asyncAddSong();\n    }\n    store.getMarkedListName =() =>{\n        if(store.markDeleteList){\n            return store.markDeleteList.name;\n        }\n    }\n    store.getMarkedSong = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song;\n        }\n    }\n    store.getMarkedSongArtist = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.artist;\n        }\n    }\n    store.getMarkedSongName = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.title;\n        }\n    }\n    store.getMarkedSongYoutubeid = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.song.youTubeId;\n        }\n    }\n    store.getMarkedSongIndex = () =>{\n        if(store.markDeleteSong){\n            return store.markDeleteSong.index;\n        }\n    }\n    store.markSongForEdition = function(nameAndIndex){\n        storeReducer({\n            type:GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n            payload:nameAndIndex\n        });\n    }\n    store.markSongForDeletion = function(nameAndIndex){\n        storeReducer({\n            type:GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload:nameAndIndex\n        });\n    }\n\n    store.markListForDeletion = function(id){\n        storeReducer({\n            type: GlobalStoreActionType.OPEN_MODAL,\n            payload:id\n        })\n    }\n    store.deletePlaylist = function(){\n        async function asyncDeletePlaylist(){\n            const resp = await api.deletePlaylistById(store.markDeleteList._id);\n            if(resp.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.DELETE_LIST_ACTION,\n                    payload:null\n                });\n                store.closeModal(\"delete-list-modal\");\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeletePlaylist();\n    }\n    //to check whether the modal type is delete list\n    store.deleteListModalIsOpen = () =>{\n        return store.modalType === ModalType.DELETE_LIST;\n    }\n\n    store.deleteSong = function (i){\n        async function asyncChangeListName() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                pl.songs.splice(i, 1);\n                async function updateList(pl) {\n                    let update = \n                    {   _id: pl._id,\n                        playlist: pl\n                    }\n                    response = await api.updatePlaylistById(update);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsA = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.REFRESH_LIST,\n                                    payload: {\n                                        idNamePairs: pairsA,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(pl);\n                    }\n                }\n                updateList(pl);\n                \n            }\n        }\n        asyncChangeListName();\n        store.closeModal(\"delete-song-modal\")\n    }\n    store.deleteSongModalIsOpen = () =>{\n        return store.modalType === ModalType.DELETE_SONG;\n    }\n    store.editSongModalIsOpen = () =>{\n        return store.modalType === ModalType.EDIT_SONG;\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    \n    store.closeModal = function (modal){\n        document.getElementById(modal).classList.remove(\"is-visible\");\n        storeReducer({\n            type:GlobalStoreActionType.CLOSE_MODAL,\n            payload:null\n        })\n    }\n    store.moveSong= function(oldSongIndex,newSongIndex){\n        async function asyncChangeListName() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let pl = response.data.playlist;\n                let movedSong = pl.songs[oldSongIndex];\n                pl.songs[oldSongIndex]=pl.songs[newSongIndex];\n                pl.songs[newSongIndex]=movedSong;\n                async function updateList(pl) {\n                    let up = \n                    {   _id: pl._id,\n                        playlist: pl\n                    }\n                    response = await api.updatePlaylistById(up);\n                    if (response.data.success) {\n                        async function getListPairs(pl) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsA = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.REFRESH_LIST,\n                                    payload: {\n                                        idNamePairs: pairsA,\n                                        playlist: pl\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(pl);\n                    }\n                }\n                updateList(pl);\n                \n            }\n        }\n        asyncChangeListName();\n    }\n    store.createNewList = function(){\n        async function asyncCreateNewList(){\n            let id = \"Untitled\" +(store.newListCounter+1);\n            const response = await api.createNewList({name:id , songs:[]});\n            if (response.data.success){\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type:GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload:playlist\n                });\n\n                store.newListCounter+=1;\n                store.setCurrentList(playlist._id);\n            }\n        } \n        asyncCreateNewList();\n    }\n    store.addDeleteSongTransaction= function(index,oldSong){\n        let transaction = new DeleteSong_Transaction(store,index,oldSong);\n        tps.addTransaction(transaction);\n    }\n    store.addAddSongTransaction = function(i,s){\n        let t = new AddSong_Transaction(store,i,s);\n        tps.addTransaction(t);\n    }\n    store.addEditSongTransaction = function(i,previousSong,initSong){\n        let t = new EditSong_Transaction(store,i,previousSong,initSong);\n        tps.addTransaction(t);\n    }\n    store.addMoveSongTransaction = function(initOldSongIndex,initNewSongIndex){\n        let t  = new MoveSong_Transaction(store,initOldSongIndex,initNewSongIndex);\n        tps.addTransaction(t);\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}