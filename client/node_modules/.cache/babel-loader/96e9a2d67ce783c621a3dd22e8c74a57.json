{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  OPEN_MODAL: \"OPEN_MODAL\",\n  CLOSE_MODAL: \"CLOSE_MODAL\",\n  DELETE_LIST_ACTION: \"DELETE_LIST_ACTION\"\n};\nconst ModalType = {\n  DELETE_LIST: \"DELETE_LIST\",\n  NONE: \"NONE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeleteList: null,\n    markDeleteSong: null,\n    modalType: ModalType.NONE\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // PREPARE TO DELETE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: payload,\n            modalType: ModalType.NONE\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      case GlobalStoreActionType.DELETE_LIST_ACTION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      case GlobalStoreActionType.OPEN_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: payload,\n            markDeleteSong: null,\n            modalType: ModalType.DELETE_LIST\n          });\n        }\n      case GlobalStoreActionType.CLOSE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: null,\n            markDeleteSong: null,\n            modalType: ModalType.NONE\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addSong = function () {};\n  store.getMarkedListName = () => {\n    if (store.markDeleteList) {\n      return store.markDeleteList.name;\n    }\n  };\n  store.markSongForDeletion = function (nameAndIndex) {\n    store.storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: nameAndIndex\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.OPEN_MODAL,\n      payload: id\n    });\n  };\n  store.deletePlaylist = function () {\n    async function asyncDeletePlaylist() {\n      const resp = await api.deletePlaylistById(store.markDeleteList._id);\n      if (resp.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST_ACTION,\n          payload: null\n        });\n        store.closeModal(\"delete-list-modal\");\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDeletePlaylist();\n  };\n  //to check whether the modal type is delete list\n  store.deleteListModalIsOpen = () => {\n    console.log(\"inside\");\n    console.log(store.modalType);\n    console.log(ModalType.DELETE_LIST);\n    return store.modalType === ModalType.DELETE_LIST;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.closeModal = function (modal) {\n    console.log(\"im here\");\n    document.getElementById(modal).classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_MODAL,\n      payload: null\n    });\n  };\n  store.createNewList = function () {\n    console.log(\"inside\");\n    async function asyncCreateNewList() {\n      let id = \"Untitled\" + (store.newListCounter + 1);\n      const response = await api.createNewList({\n        name: id,\n        songs: []\n      });\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.newListCounter += 1;\n        store.loadIdNamePairs();\n      }\n    }\n    asyncCreateNewList();\n  };\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"X6Fzw1g+Jh+PTIU96R1U6FG4Ieo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","OPEN_MODAL","CLOSE_MODAL","DELETE_LIST_ACTION","ModalType","DELETE_LIST","NONE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeleteList","markDeleteSong","modalType","storeReducer","action","type","payload","playlist","MARK_SONG_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","addSong","getMarkedListName","markSongForDeletion","nameAndIndex","markListForDeletion","deletePlaylist","asyncDeletePlaylist","resp","deletePlaylistById","closeModal","deleteListModalIsOpen","setlistNameActive","modal","document","getElementById","classList","remove","createNewList","asyncCreateNewList"],"sources":["/Users/ronghaozeng/playlister_HW-/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n//TESTING\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    OPEN_MODAL:\"OPEN_MODAL\",\n    CLOSE_MODAL:\"CLOSE_MODAL\",\n    DELETE_LIST_ACTION:\"DELETE_LIST_ACTION\"\n}\nconst ModalType = {\n    DELETE_LIST: \"DELETE_LIST\",\n    NONE:\"NONE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeleteList :null,\n        markDeleteSong:null,\n        modalType: ModalType.NONE\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // PREPARE TO DELETE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:payload,\n                    modalType: ModalType.NONE\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markDeleteList :null,\n                    markDeleteSong:null,\n                    modalType: ModalType.NONE\n                });\n            }\n            case GlobalStoreActionType.DELETE_LIST_ACTION:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter:store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE\n                })\n            }\n            case GlobalStoreActionType.OPEN_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : null,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:payload,\n                    markDeleteSong:null,\n                    modalType:ModalType.DELETE_LIST\n                })\n\n            }\n            case GlobalStoreActionType.CLOSE_MODAL:{\n                return setStore({\n                    idNamePairs : store.idNamePairs,\n                    currentList : null,\n                    newListCounter : store.newListCounter,\n                    listNameActive:false,\n                    markDeleteList:null,\n                    markDeleteSong:null,\n                    modalType:ModalType.NONE\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n    store.addSong = function(){\n    }\n    store.getMarkedListName =() =>{\n        if(store.markDeleteList){\n            return store.markDeleteList.name;\n        }\n    }\n    store.markSongForDeletion = function(nameAndIndex){\n        store.storeReducer({\n            type:GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload:nameAndIndex\n        });\n    }\n\n    store.markListForDeletion = function(id){\n        storeReducer({\n            type: GlobalStoreActionType.OPEN_MODAL,\n            payload:id\n        })\n    }\n    store.deletePlaylist = function(){\n        async function asyncDeletePlaylist(){\n            const resp = await api.deletePlaylistById(store.markDeleteList._id);\n            if(resp.data.success){\n                storeReducer({\n                    type:GlobalStoreActionType.DELETE_LIST_ACTION,\n                    payload:null\n                });\n                store.closeModal(\"delete-list-modal\");\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeletePlaylist();\n    }\n    //to check whether the modal type is delete list\n    store.deleteListModalIsOpen = () =>{\n        console.log(\"inside\")\n        console.log(store.modalType)\n        console.log(ModalType.DELETE_LIST)\n        return store.modalType === ModalType.DELETE_LIST;\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    \n    store.closeModal = function (modal){\n        console.log(\"im here\")\n        document.getElementById(modal).classList.remove(\"is-visible\");\n        storeReducer({\n            type:GlobalStoreActionType.CLOSE_MODAL,\n            payload:null\n        })\n    }\n    \n    store.createNewList = function(){\n        console.log(\"inside\");\n        async function asyncCreateNewList(){\n            let id = \"Untitled\" +(store.newListCounter+1);\n            const response = await api.createNewList({name:id , songs:[]});\n            if (response.data.success){\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type:GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload:playlist\n                });\n                store.newListCounter+=1;\n                store.loadIdNamePairs();\n            }\n        } \n        asyncCreateNewList();\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}